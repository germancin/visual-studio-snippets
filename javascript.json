{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"For_Loop": {
        "prefix": "js..for",
        "body": [
		"for (let i=0; i < ${1:theArray}.length; i++) {",
		"	const currentItem = ${2:theArray}[i];",
		"	console.log(currentItem);",
		"}"
        ],
        "description": "Regular for loop"
	},
	
	"Map_Loop": {
        "prefix": "js..map",
        "body": [
		  "const result = ${1:theArray}.map((val, index) => { ",
		  "  console.log(val);",
		  "  return val;",
		  "});",

        ],
        "description": "Regular map loop"
	},
	
	"Reducer_Loop": {
        "prefix": "js..reduce",
        "body": [
		  "const reducer = theArray.reduce((acum, currentVal) => {",
		  "  return acum + currentVal;",
		  "});",
		  "console.log(reducer)",

        ],
        "description": "Regular reduce loop"
	},
	
	"Remove_Duplicates": {
        "prefix": "js..remove_duplicates",
        "body": [
		  "let newObj = new Set([1,2,3,4,5,6,6,7,7]); // O(n)",
		  "newArrayNoDups = Array.from(newObj); // O(n)",
		  "console.log(newArrayNoDups)",
        ],
        "description": "Remove duplicates from array or string"
	},
	
	"High_Frecuency": {
        "prefix": "js..high_frecuency",
        "body": [
		"function higestFrequency(strings) {",
		"	const frecuency  = {}",
		"	let maxFrecuency = 0",
		"	let higestItem   = ''",
		"	",
		"for(let i=0; i < strings.length; i++){ //O(n)",
		"	let item = strings[i]",

		"	if(frecuency[item] === undefined){",
			"	frecuency[item] = 1",
		" 	}else{",
			"	frecuency[item]++",
		"	}",

		" 	// here I am using 2 variables to store the maxFrecuency value and then",
		" 	// I add the key which is the value I want",
		"	if(frecuency[item] > maxFrecuency){",
			"	maxFrecuency = frecuency[item]",
			"	higestItem   = item",
		"	}",
		"}",

		"return higestItem",
		"}",
		
		"console.log(",
		"	higestFrequency(['a','b','c','d','e']),",       
		"	higestFrequency(['abc','def','abc','def','abc']), ",
		"	higestFrequency(['abc','def']),",             
		"	higestFrequency(['abc','abc','abc','def','def','def','ghi','ghi','ghi','ghi']),",  
		")",
		  
        ],
        "description": "Highest Frecuency"
	},

	"Class_Structure": {
        "prefix": "js..class",
        "body": [
		"class Rectangle {",
		"	constructor(height, width) {",
		"		this.height = height;",
		"		this.width = width;",
		"	}",
		"	",
		"	get area() {",
		"		return this.calcArea();",
		"	}",
		"	",
		"	calcArea() {",
		"		return this.height * this.width;";
		"	}",
		"};",
		"   ",
		"const square = new Rectangle(10, 10);",
		"console.log(square.area);",
        ],
        "description": "Simlpe class getter calculates the area"
	},

	"Slice": {
        "prefix": "js..slice",
        "body": [

		"${1:string}.slice(${2:IntegerForm}, ${3:IntegerTo})"

        ],
        "description": "Get elements from to"
	},

	"Rotation_Finder": {
        "prefix": "js..rotate_rotation",
        "body": [

		"//Find the Rotation",
		"let str1 = 'rotation';",
		"let str2 = 'tationro';",
		" ",
		"const result =  (str1.length === str2.length && (str1 + str1).includes(str2));",
		"console.log(result); //should be true"

        ],
        "description": "Rotates string1 to find it in string2"
	},

	"Function": {
        "prefix": "js..function",
        "body": [

		"function myFunction(){",
		"	return 'hello world';",
		"}",
		" ",
		"console.log( myFunction() );"

        ],
        "description": "A regular function structure"
	},

	"Copy_Array": {
        "prefix": "js..copy_array",
        "body": [

		"const originalArray = [1,2,3,4,5,6,7,8,9];",
		"const copiedArray = [...originalArray];",

        ],
        "description": "Simple copy of an array obj"
	},

	"Max_Profit": {
        "prefix": "js..max_profit",
        "body": [

		"//Get the maximun posible profit from an array of numbers",
		"// [10,7,5,8,11,9] ",
		"// this is achieved by sustracting currentItem - the previous",
		" ",
		"function maxProfit(prices){",
		"    let minPrice = Infinity;",
		"    let maxProfit = 0;",
		
		"    for (let i=0; i < prices.length; i++) {",
		"        const currentPrice = prices[i];",
		"        minPrice = Math.min(minPrice, currentPrice);",
		"        maxProfit = Math.max(maxProfit, currentPrice - minPrice);",
		"    }",
		"    ",
		"    return maxProfit;",
		"}",
		" ",
		"maxProfit( [10,7,5,8,11,9] );"

        ],
        "description": "Returns the max profit from an array of numbers."
	},

	"Console_Log": {
	"prefix": "js..console_log",
	"body": [

		"console.log(${1:variable});",

	],
	"description": "Console log anything"
	},

	"Square_Matrix_Rotation": {
	"prefix": "js..square_matrix_rotation",
	"body": [

		"// Rotate a matrix 90 degrees clockwise",
		"// squares matrix",
		"// [[1,2,3],",
		"//  [4,5,6],",
		"//  [7,8,9]]",
		" ",
		"// The result should be:",
		"// [[7,4,1],",
		"//  [8,5,2],",
		"//  [9,6,3]]",
		" ",
		"function rotate(mat){",
		"	const newMatrix = [];",
		"	//this will create the number of array the matrix needs.",
		"	for (let i=0; i < mat.length; i++) {",
		"		newMatrix.push([]);",
		"	}",
		"",
		"	for (let i=0; i < mat.length; i++) {",
		"		for (let j=0; j < mat.length; j++) {",
		"			newMatrix[j][mat.length -1 -i] = mat[i][j];",
		"			console.log(j, i, mat.length -1 -i, mat[i][j]);",
		"		}",
		"	}",
		"	return newMatrix;",
		"}",
		" ",
		"rotate(",
		"	[[1,2,3],",
		"	[4,5,6],",
		"	[7,8,9]]",
		")",

	],
	"description": "Rotates a square matrix 90 degrees"
	},

	"Binary_Search": {
        "prefix": "js..binary_search",
        "body": [

			"function binarySearch(numbers, target){",
				"",
			"	// we get the first and the last index from the array.",
			"	let startIndex = 0;",
			"	let endIndex = numbers.length - 1;",
			"",
			"	// we check if the target is in the range of the ",
			"	// given array of elements",
			"	if( target < numbers[startIndex] || target > numbers[endIndex]){",
			"		return -1;",
			"	}",
			"",
			"	// we create a loop ",
			"	while (1) {",
					"",
			"		// we check if hte target is iquals to the ",
			"		// first or the last element of the array of numbers",
			"",
			"		if(target === numbers[startIndex] ){",
			"			return startIndex;",
			"		}",
			"",
			"		if(target === numbers[endIndex] ){",
			"			return endIndex;",
			"		}",
			"",
			"		// if this is true means the indexes got close",
			"		// to one number but still didn't find the number",
			"		// so return false(-1)",
			"		if(endIndex - startIndex <= 1){",
			"			return -1",
			"		}",
			"",
			"		// we need to know if the target is smaller",
			"		// than the middle of the array or bigger than",
			"		// the middle index of the array. so we get the middle index",
			"		const middleIndex = Math.floor((startIndex + endIndex) / 2);",
			"",
			"		// get the middle number value",
			"		const middleNumber = numbers[middleIndex];",
			"",
			"		// now we have to move the indexes so it start looking",
			"		// from the second have of the array (right side)",
			"		// we move the startIndex to the right side of the array",
			"		// else if the target number is less than the middle number",
			"		// we move the endIndex to the left side of the array.",
			"		// else we return the middle index",
			"",
			"		if(target > middleNumber){",
			"			startIndex = middleIndex + 1;",
			"		}else if (target < middleNumber){",
			"			endIndex = middleIndex -1;",
			"		}else {",
			"			return middleIndex;",
			"		}",
			"",
			"",
			"	}",
			"",
			"",
			"}",
			 "",
			"console.log( binarySearch([1,3,6,7,17,13,20], 2) );",
			"console.log( binarySearch([1,3,6,7,17], 17) );",
			"",
			

        ],
        "description": "Binary Search"
	},

	"Fibonacci_Brute_Force": {
		"prefix": "js..fibonacci_brute_force",
		"body": [
	
			"function fibo(n){",
			"	// set the first to numbers of the fibo sequence",
			"	// since they are constansts",
			"	let seq = [1, 1];",
			"",
			"	// if the number is 1 then return just the first ",
			"	// element form the squence",
			"	if( n < 2 ) {",
			"		return seq.slice(0, n);",
			"	}",
			"",
			"	// create the loop to go through the amount",
			"	// of the times from the number imputed.",
			"	while (seq.length < n) {",
			"		// por cada pasada tengo que coger los dos ultimos ",
			"		// items del array para luego sumarlos",
			"		const lastItem = seq[seq.length - 1];",
			"		const secondLastItem = seq[seq.length - 2];",
			"",
			"		// aqui una vez que tengo los dos ultimos items",
			"		// los sumo y los aÃ±ado a la sequence ",
			"		// y al pasar otra vez por el loop vuelvo a coger los dos ultimos",
			"		// para volver hacer el mismo proceso",
			"		seq.push(lastItem + secondLastItem);",
			"	}",
			"",
			"	return seq;",
			"}",
			"",
			"console.log(fibo(4)); // [ 1, 1, 2, 3 ] ",
			"console.log(fibo(6)); // [1, 1, 2, 3, 5, 8]",
			"console.log( fibo(8) );  // [1, 1, 2, 3, 5, 8, 13, 21]",
	
		],
		"description": "Console log anything"
		},
}
